{"ast":null,"code":"var _jsxFileName = \"/Users/matarsarfati/Downloads/basketball-minutes-fixed/src/WellnessReport.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WellnessReport() {\n  _s();\n  const [data, setData] = useState([]);\n  const [dailyAverages, setDailyAverages] = useState({});\n  const [rollingTeamAverages, setRollingTeamAverages] = useState({});\n  const [playerRollingAverages, setPlayerRollingAverages] = useState({});\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [filteredVariable, setFilteredVariable] = useState('sleep');\n  const [filteredAverage, setFilteredAverage] = useState(null);\n  const sheetUrl = \"https://opensheet.elk.sh/1x1e53gsx3VzEJ5ON5QOvYeJTGI8auMtSxJYYpUUmreY/Wallnes\";\n  useEffect(() => {\n    fetch(sheetUrl).then(res => res.json()).then(json => {\n      setData(json);\n      calculateDailyAverages(json);\n      calculateRollingAverages(json);\n    });\n  }, []);\n  const calculateDailyAverages = json => {\n    const result = {};\n    json.forEach(entry => {\n      const date = entry.Date;\n      const sleep = Number(entry[\"What is the quality of your sleep at night?\"]);\n      const sore = Number(entry[\"How sore are you?\"]);\n      const fatigue = Number(entry[\"How Fatigued are you?\"]);\n      if (!result[date]) {\n        result[date] = {\n          count: 0,\n          sleep: 0,\n          sore: 0,\n          fatigue: 0\n        };\n      }\n      result[date].count++;\n      result[date].sleep += sleep;\n      result[date].sore += sore;\n      result[date].fatigue += fatigue;\n    });\n    const formatted = {};\n    for (const date in result) {\n      const item = result[date];\n      formatted[date] = {\n        sleep: (item.sleep / item.count).toFixed(2),\n        sore: (item.sore / item.count).toFixed(2),\n        fatigue: (item.fatigue / item.count).toFixed(2)\n      };\n    }\n    setDailyAverages(formatted);\n  };\n  const calculateRollingAverages = json => {\n    const sorted = [...json].sort((a, b) => new Date(a.Date) - new Date(b.Date));\n    const playerData = {};\n    const teamData = [];\n    sorted.forEach(entry => {\n      const name = entry.Name;\n      const date = entry.Date;\n      const sleep = Number(entry[\"What is the quality of your sleep at night?\"]);\n      const sore = Number(entry[\"How sore are you?\"]);\n      const fatigue = Number(entry[\"How Fatigued are you?\"]);\n      if (!playerData[name]) playerData[name] = [];\n      playerData[name].push({\n        date,\n        sleep,\n        sore,\n        fatigue\n      });\n      teamData.push({\n        date,\n        sleep,\n        sore,\n        fatigue\n      });\n    });\n    const teamRolling = {};\n    const dates = [...new Set(teamData.map(e => e.date))].slice(-5);\n    dates.forEach((_, i, arr) => {\n      const window = arr.slice(0, i + 1);\n      const filtered = teamData.filter(e => window.includes(e.date));\n      const count = filtered.length;\n      const avg = {\n        sleep: (filtered.reduce((a, b) => a + b.sleep, 0) / count).toFixed(2),\n        sore: (filtered.reduce((a, b) => a + b.sore, 0) / count).toFixed(2),\n        fatigue: (filtered.reduce((a, b) => a + b.fatigue, 0) / count).toFixed(2)\n      };\n      teamRolling[window[window.length - 1]] = avg;\n    });\n    setRollingTeamAverages(teamRolling);\n    const playerRolling = {};\n    Object.entries(playerData).forEach(([name, entries]) => {\n      const recent = entries.slice(-5);\n      const count = recent.length;\n      const avg = {\n        sleep: (recent.reduce((a, b) => a + b.sleep, 0) / count).toFixed(2),\n        sore: (recent.reduce((a, b) => a + b.sore, 0) / count).toFixed(2),\n        fatigue: (recent.reduce((a, b) => a + b.fatigue, 0) / count).toFixed(2)\n      };\n      playerRolling[name] = avg;\n    });\n    setPlayerRollingAverages(playerRolling);\n  };\n  const calculateFilteredAverage = () => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n      alert(\"יש להזין תאריכים תקינים.\");\n      return;\n    }\n    const filtered = data.filter(entry => {\n      const entryDate = new Date(entry.Date);\n      return entryDate >= start && entryDate <= end;\n    });\n    const count = filtered.length;\n    const sum = filtered.reduce((acc, curr) => acc + Number(curr[filteredVariable]), 0);\n    const avg = (sum / count).toFixed(2);\n    setFilteredAverage(avg);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wellness-report\",\n    dir: \"rtl\",\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u05D3\\u05D5\\u05D7 Wellness\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2\\u05D9\\u05DD \\u05E7\\u05D1\\u05D5\\u05E6\\u05EA\\u05D9\\u05D9\\u05DD \\u05DE\\u05EA\\u05D2\\u05DC\\u05D2\\u05DC\\u05D9\\u05DD (5 \\u05D9\\u05DE\\u05D9\\u05DD \\u05D0\\u05D7\\u05E8\\u05D5\\u05E0\\u05D9\\u05DD)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"8\",\n      style: {\n        borderCollapse: \"collapse\",\n        width: \"100%\",\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u05EA\\u05D0\\u05E8\\u05D9\\u05DA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u05E9\\u05D9\\u05E0\\u05D4 \\uD83D\\uDCA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA \\uD83D\\uDE34\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD \\uD83D\\uDCAA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Object.entries(rollingTeamAverages).map(([date, avg]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: avg.sleep\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: avg.fatigue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: avg.sore\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, date, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u05D7\\u05D9\\u05E9\\u05D5\\u05D1 \\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05DC\\u05E4\\u05D9 \\u05D8\\u05D5\\u05D5\\u05D7 \\u05EA\\u05D0\\u05E8\\u05D9\\u05DB\\u05D9\\u05DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u05DE\\u05EA\\u05D0\\u05E8\\u05D9\\u05DA: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: startDate,\n          onChange: e => setStartDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u05E2\\u05D3 \\u05EA\\u05D0\\u05E8\\u05D9\\u05DA: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: endDate,\n          onChange: e => setEndDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u05DE\\u05E9\\u05EA\\u05E0\\u05D4:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filteredVariable,\n          onChange: e => setFilteredVariable(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"What is the quality of your sleep at night?\",\n            children: \"\\u05E9\\u05D9\\u05E0\\u05D4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"How Fatigued are you?\",\n            children: \"\\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"How sore are you?\",\n            children: \"\\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: calculateFilteredAverage,\n        children: \"\\u05D7\\u05E9\\u05D1 \\u05DE\\u05DE\\u05D5\\u05E6\\u05E2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), filteredAverage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u05D4\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05D1\\u05D8\\u05D5\\u05D5\\u05D7 \\u05E9\\u05E0\\u05D1\\u05D7\\u05E8: \", filteredAverage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(WellnessReport, \"41x376J6f40E+1H5X57cvrq6dUU=\");\n_c = WellnessReport;\nexport default WellnessReport;\nvar _c;\n$RefreshReg$(_c, \"WellnessReport\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WellnessReport","_s","data","setData","dailyAverages","setDailyAverages","rollingTeamAverages","setRollingTeamAverages","playerRollingAverages","setPlayerRollingAverages","startDate","setStartDate","endDate","setEndDate","filteredVariable","setFilteredVariable","filteredAverage","setFilteredAverage","sheetUrl","fetch","then","res","json","calculateDailyAverages","calculateRollingAverages","result","forEach","entry","date","Date","sleep","Number","sore","fatigue","count","formatted","item","toFixed","sorted","sort","a","b","playerData","teamData","name","Name","push","teamRolling","dates","Set","map","e","slice","_","i","arr","window","filtered","filter","includes","length","avg","reduce","playerRolling","Object","entries","recent","calculateFilteredAverage","start","end","isNaN","getTime","alert","entryDate","sum","acc","curr","className","dir","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","border","cellPadding","borderCollapse","width","textAlign","type","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["/Users/matarsarfati/Downloads/basketball-minutes-fixed/src/WellnessReport.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction WellnessReport() {\n  const [data, setData] = useState([]);\n  const [dailyAverages, setDailyAverages] = useState({});\n  const [rollingTeamAverages, setRollingTeamAverages] = useState({});\n  const [playerRollingAverages, setPlayerRollingAverages] = useState({});\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [filteredVariable, setFilteredVariable] = useState('sleep');\n  const [filteredAverage, setFilteredAverage] = useState(null);\n\n  const sheetUrl = \"https://opensheet.elk.sh/1x1e53gsx3VzEJ5ON5QOvYeJTGI8auMtSxJYYpUUmreY/Wallnes\";\n\n  useEffect(() => {\n    fetch(sheetUrl)\n      .then(res => res.json())\n      .then(json => {\n        setData(json);\n        calculateDailyAverages(json);\n        calculateRollingAverages(json);\n      });\n  }, []);\n\n  const calculateDailyAverages = (json) => {\n    const result = {};\n    json.forEach(entry => {\n      const date = entry.Date;\n      const sleep = Number(entry[\"What is the quality of your sleep at night?\"]);\n      const sore = Number(entry[\"How sore are you?\"]);\n      const fatigue = Number(entry[\"How Fatigued are you?\"]);\n\n      if (!result[date]) {\n        result[date] = { count: 0, sleep: 0, sore: 0, fatigue: 0 };\n      }\n\n      result[date].count++;\n      result[date].sleep += sleep;\n      result[date].sore += sore;\n      result[date].fatigue += fatigue;\n    });\n\n    const formatted = {};\n    for (const date in result) {\n      const item = result[date];\n      formatted[date] = {\n        sleep: (item.sleep / item.count).toFixed(2),\n        sore: (item.sore / item.count).toFixed(2),\n        fatigue: (item.fatigue / item.count).toFixed(2),\n      };\n    }\n\n    setDailyAverages(formatted);\n  };\n\n  const calculateRollingAverages = (json) => {\n    const sorted = [...json].sort((a, b) => new Date(a.Date) - new Date(b.Date));\n\n    const playerData = {};\n    const teamData = [];\n\n    sorted.forEach(entry => {\n      const name = entry.Name;\n      const date = entry.Date;\n      const sleep = Number(entry[\"What is the quality of your sleep at night?\"]);\n      const sore = Number(entry[\"How sore are you?\"]);\n      const fatigue = Number(entry[\"How Fatigued are you?\"]);\n\n      if (!playerData[name]) playerData[name] = [];\n      playerData[name].push({ date, sleep, sore, fatigue });\n      teamData.push({ date, sleep, sore, fatigue });\n    });\n\n    const teamRolling = {};\n    const dates = [...new Set(teamData.map(e => e.date))].slice(-5);\n\n    dates.forEach((_, i, arr) => {\n      const window = arr.slice(0, i + 1);\n      const filtered = teamData.filter(e => window.includes(e.date));\n      const count = filtered.length;\n      const avg = {\n        sleep: (filtered.reduce((a, b) => a + b.sleep, 0) / count).toFixed(2),\n        sore: (filtered.reduce((a, b) => a + b.sore, 0) / count).toFixed(2),\n        fatigue: (filtered.reduce((a, b) => a + b.fatigue, 0) / count).toFixed(2),\n      };\n      teamRolling[window[window.length - 1]] = avg;\n    });\n\n    setRollingTeamAverages(teamRolling);\n\n    const playerRolling = {};\n    Object.entries(playerData).forEach(([name, entries]) => {\n      const recent = entries.slice(-5);\n      const count = recent.length;\n      const avg = {\n        sleep: (recent.reduce((a, b) => a + b.sleep, 0) / count).toFixed(2),\n        sore: (recent.reduce((a, b) => a + b.sore, 0) / count).toFixed(2),\n        fatigue: (recent.reduce((a, b) => a + b.fatigue, 0) / count).toFixed(2),\n      };\n      playerRolling[name] = avg;\n    });\n    setPlayerRollingAverages(playerRolling);\n  };\n\n  const calculateFilteredAverage = () => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n      alert(\"יש להזין תאריכים תקינים.\");\n      return;\n    }\n\n    const filtered = data.filter(entry => {\n      const entryDate = new Date(entry.Date);\n      return entryDate >= start && entryDate <= end;\n    });\n\n    const count = filtered.length;\n    const sum = filtered.reduce((acc, curr) => acc + Number(curr[filteredVariable]), 0);\n    const avg = (sum / count).toFixed(2);\n    setFilteredAverage(avg);\n  };\n\n  return (\n    <div className=\"wellness-report\" dir=\"rtl\" style={{ padding: '20px' }}>\n      <h1>דוח Wellness</h1>\n\n      <h2>ממוצעים קבוצתיים מתגלגלים (5 ימים אחרונים)</h2>\n      <table border=\"1\" cellPadding=\"8\" style={{ borderCollapse: \"collapse\", width: \"100%\", textAlign: \"center\" }}>\n        <thead>\n          <tr>\n            <th>תאריך</th>\n            <th>שינה 💤</th>\n            <th>עייפות 😴</th>\n            <th>כאבי שרירים 💪</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(rollingTeamAverages).map(([date, avg]) => (\n            <tr key={date}>\n              <td>{date}</td>\n              <td>{avg.sleep}</td>\n              <td>{avg.fatigue}</td>\n              <td>{avg.sore}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <h3>חישוב ממוצע לפי טווח תאריכים</h3>\n      <div>\n        <label>מתאריך: <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} /></label>\n        <label>עד תאריך: <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} /></label>\n        <label>\n          משתנה:\n          <select value={filteredVariable} onChange={(e) => setFilteredVariable(e.target.value)}>\n            <option value=\"What is the quality of your sleep at night?\">שינה</option>\n            <option value=\"How Fatigued are you?\">עייפות</option>\n            <option value=\"How sore are you?\">כאבי שרירים</option>\n          </select>\n        </label>\n        <button onClick={calculateFilteredAverage}>חשב ממוצע</button>\n        {filteredAverage && <p>הממוצע בטווח שנבחר: {filteredAverage}</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default WellnessReport;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}