{"ast":null,"code":"var _jsxFileName = \"/Users/matarsarfati/Downloads/basketball-minutes-fixed/src/WellnessReport.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WellnessReport() {\n  _s();\n  const [data, setData] = useState([]);\n  const [playerStats, setPlayerStats] = useState({});\n  const [groupStatsByDay, setGroupStatsByDay] = useState([]);\n  const [groupRollingAverage, setGroupRollingAverage] = useState(null);\n  const [customStartDate, setCustomStartDate] = useState('');\n  const [customEndDate, setCustomEndDate] = useState('');\n  const [customGroupAverage, setCustomGroupAverage] = useState(null);\n  const [expandedPlayers, setExpandedPlayers] = useState({});\n  const sheetUrl = 'https://opensheet.elk.sh/1x1e53gsx3VzEJ5ON5QOvYeJTGI8auMtSxJYYpUUmreY/Wallnes';\n  useEffect(() => {\n    fetch(sheetUrl).then(res => res.json()).then(json => {\n      const parsed = json.map(entry => ({\n        name: entry['Name'],\n        sleep: Number(entry['What is the quality of your sleep at night?']),\n        sore: Number(entry['How sore are you?']),\n        fatigue: Number(entry['How Fatigued are you?']),\n        date: parseDate(entry['Timestamp'])\n      })).filter(e => !isNaN(e.sleep) && !isNaN(e.sore) && !isNaN(e.fatigue) && e.date);\n      setData(parsed);\n      const groupedByDate = groupByDate(parsed);\n      setGroupStatsByDay(groupedByDate);\n      const rollingAvg = calcRollingAverage(parsed);\n      setGroupRollingAverage(rollingAvg);\n      const players = {};\n      parsed.forEach(e => {\n        if (!players[e.name]) players[e.name] = [];\n        players[e.name].push(e);\n      });\n      setPlayerStats(players);\n    });\n  }, []);\n  const parseDate = str => {\n    const [datePart] = str.split(' ');\n    const [day, month, year] = datePart.split('/');\n    return new Date(`${year}-${month}-${day}`);\n  };\n  const groupByDate = data => {\n    const days = {};\n    data.forEach(entry => {\n      const key = entry.date.toDateString();\n      if (!days[key]) days[key] = [];\n      days[key].push(entry);\n    });\n    const result = Object.entries(days).map(([dateStr, entries]) => {\n      const sleepAvg = avg(entries.map(e => e.sleep));\n      const soreAvg = avg(entries.map(e => e.sore));\n      const fatigueAvg = avg(entries.map(e => e.fatigue));\n      return {\n        dateStr,\n        sleepAvg,\n        soreAvg,\n        fatigueAvg\n      };\n    }).slice(-8); // last 8 days\n    return result;\n  };\n  const avg = arr => arr.length ? (arr.reduce((a, b) => a + b, 0) / arr.length).toFixed(1) : 'אין דיווח';\n  const calcRollingAverage = entries => {\n    const cutoff = new Date();\n    cutoff.setDate(cutoff.getDate() - 7);\n    const lastDays = entries.filter(e => e.date >= cutoff);\n    return {\n      sleep: avg(lastDays.map(e => e.sleep)),\n      sore: avg(lastDays.map(e => e.sore)),\n      fatigue: avg(lastDays.map(e => e.fatigue))\n    };\n  };\n  const calcAverageInRange = (entries, start, end) => {\n    const filtered = entries.filter(e => e.date >= start && e.date <= end);\n    return {\n      sleep: avg(filtered.map(e => e.sleep)),\n      sore: avg(filtered.map(e => e.sore)),\n      fatigue: avg(filtered.map(e => e.fatigue))\n    };\n  };\n  const renderDayAveragesTable = () => /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\u05EA\\u05D0\\u05E8\\u05D9\\u05DA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\u05E9\\u05D9\\u05E0\\u05D4 \\uD83D\\uDCA4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA \\uD83D\\uDE34\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD \\uD83D\\uDCAA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: groupStatsByDay.map((d, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: d.dateStr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: d.sleepAvg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: d.fatigueAvg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: d.soreAvg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n  const renderPlayerSection = (name, entries) => {\n    const last8 = groupByDate(entries).slice(-8);\n    const avgRolling = calcRollingAverage(entries);\n    const getLastDaysAvg = n => {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - (n - 1));\n      return calcAverageInRange(entries, start, end);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          cursor: 'pointer',\n          color: '#007bff'\n        },\n        onClick: () => setExpandedPlayers(p => ({\n          ...p,\n          [name]: !p[name]\n        })),\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), expandedPlayers[name] && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: [renderDayAveragesTable(last8), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05DE\\u05EA\\u05D2\\u05DC\\u05D2\\u05DC:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u05E9\\u05D9\\u05E0\\u05D4: \", avgRolling.sleep, \" | \\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA: \", avgRolling.fatigue, \" | \\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD: \", avgRolling.sore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 3 \\u05D9\\u05DE\\u05D9\\u05DD: \", getLastDaysAvg(3).sleep, \", \", getLastDaysAvg(3).fatigue, \", \", getLastDaysAvg(3).sore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 5 \\u05D9\\u05DE\\u05D9\\u05DD: \", getLastDaysAvg(5).sleep, \", \", getLastDaysAvg(5).fatigue, \", \", getLastDaysAvg(5).sore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 8 \\u05D9\\u05DE\\u05D9\\u05DD: \", getLastDaysAvg(8).sleep, \", \", getLastDaysAvg(8).fatigue, \", \", getLastDaysAvg(8).sore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u05D8\\u05D5\\u05D5\\u05D7 \\u05DE\\u05D5\\u05EA\\u05D0\\u05DD \\u05D0\\u05D9\\u05E9\\u05D9:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 46\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            onChange: e => setCustomStartDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            onChange: e => setCustomEndDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              const start = new Date(customStartDate);\n              const end = new Date(customEndDate);\n              const avg = calcAverageInRange(entries, start, end);\n              alert(`שינה: ${avg.sleep}, עייפות: ${avg.fatigue}, כאבי שרירים: ${avg.sore}`);\n            },\n            children: \"\\u05D7\\u05E9\\u05D1 \\u05DE\\u05DE\\u05D5\\u05E6\\u05E2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    dir: \"rtl\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u05D3\\u05D5\\u05D7 Wellness\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05E7\\u05D1\\u05D5\\u05E6\\u05EA\\u05D9 - \\u05DC\\u05E4\\u05D9 \\u05D9\\u05DE\\u05D9\\u05DD (8 \\u05D9\\u05DE\\u05D9\\u05DD \\u05D0\\u05D7\\u05E8\\u05D5\\u05E0\\u05D9\\u05DD)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), renderDayAveragesTable(), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05E7\\u05D1\\u05D5\\u05E6\\u05EA\\u05D9 \\u05DE\\u05EA\\u05D2\\u05DC\\u05D2\\u05DC (8 \\u05D9\\u05DE\\u05D9\\u05DD \\u05D0\\u05D7\\u05E8\\u05D5\\u05E0\\u05D9\\u05DD)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u05E9\\u05D9\\u05E0\\u05D4: \", groupRollingAverage === null || groupRollingAverage === void 0 ? void 0 : groupRollingAverage.sleep, \" | \\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA: \", groupRollingAverage === null || groupRollingAverage === void 0 ? void 0 : groupRollingAverage.fatigue, \" | \\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD: \", groupRollingAverage === null || groupRollingAverage === void 0 ? void 0 : groupRollingAverage.sore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05E7\\u05D1\\u05D5\\u05E6\\u05EA\\u05D9 \\u05DC\\u05E4\\u05D9 \\u05D8\\u05D5\\u05D5\\u05D7 \\u05EA\\u05D0\\u05E8\\u05D9\\u05DB\\u05D9\\u05DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      onChange: e => setCustomStartDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      onChange: e => setCustomEndDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        const start = new Date(customStartDate);\n        const end = new Date(customEndDate);\n        const avg = calcAverageInRange(data, start, end);\n        setCustomGroupAverage(avg);\n      },\n      children: \"\\u05D7\\u05E9\\u05D1 \\u05DE\\u05DE\\u05D5\\u05E6\\u05E2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), customGroupAverage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u05E9\\u05D9\\u05E0\\u05D4: \", customGroupAverage.sleep, \", \\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA: \", customGroupAverage.fatigue, \", \\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD: \", customGroupAverage.sore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2\\u05D9\\u05DD \\u05DC\\u05E4\\u05D9 \\u05E9\\u05D7\\u05E7\\u05E0\\u05D9\\u05EA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), Object.entries(playerStats).map(([name, entries]) => renderPlayerSection(name, entries))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(WellnessReport, \"Flk9t1dDb4vJwbw14i4yqtojAKE=\");\n_c = WellnessReport;\nexport default WellnessReport;\nvar _c;\n$RefreshReg$(_c, \"WellnessReport\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WellnessReport","_s","data","setData","playerStats","setPlayerStats","groupStatsByDay","setGroupStatsByDay","groupRollingAverage","setGroupRollingAverage","customStartDate","setCustomStartDate","customEndDate","setCustomEndDate","customGroupAverage","setCustomGroupAverage","expandedPlayers","setExpandedPlayers","sheetUrl","fetch","then","res","json","parsed","map","entry","name","sleep","Number","sore","fatigue","date","parseDate","filter","e","isNaN","groupedByDate","groupByDate","rollingAvg","calcRollingAverage","players","forEach","push","str","datePart","split","day","month","year","Date","days","key","toDateString","result","Object","entries","dateStr","sleepAvg","avg","soreAvg","fatigueAvg","slice","arr","length","reduce","a","b","toFixed","cutoff","setDate","getDate","lastDays","calcAverageInRange","start","end","filtered","renderDayAveragesTable","children","fileName","_jsxFileName","lineNumber","columnNumber","d","idx","renderPlayerSection","last8","avgRolling","getLastDaysAvg","n","style","cursor","color","onClick","p","marginBottom","type","onChange","target","value","alert","padding","dir","_c","$RefreshReg$"],"sources":["/Users/matarsarfati/Downloads/basketball-minutes-fixed/src/WellnessReport.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction WellnessReport() {\n  const [data, setData] = useState([]);\n  const [playerStats, setPlayerStats] = useState({});\n  const [groupStatsByDay, setGroupStatsByDay] = useState([]);\n  const [groupRollingAverage, setGroupRollingAverage] = useState(null);\n  const [customStartDate, setCustomStartDate] = useState('');\n  const [customEndDate, setCustomEndDate] = useState('');\n  const [customGroupAverage, setCustomGroupAverage] = useState(null);\n  const [expandedPlayers, setExpandedPlayers] = useState({});\n\n  const sheetUrl = 'https://opensheet.elk.sh/1x1e53gsx3VzEJ5ON5QOvYeJTGI8auMtSxJYYpUUmreY/Wallnes';\n\n  useEffect(() => {\n    fetch(sheetUrl)\n      .then((res) => res.json())\n      .then((json) => {\n        const parsed = json.map((entry) => ({\n          name: entry['Name'],\n          sleep: Number(entry['What is the quality of your sleep at night?']),\n          sore: Number(entry['How sore are you?']),\n          fatigue: Number(entry['How Fatigued are you?']),\n          date: parseDate(entry['Timestamp']),\n        })).filter(e => !isNaN(e.sleep) && !isNaN(e.sore) && !isNaN(e.fatigue) && e.date);\n\n        setData(parsed);\n\n        const groupedByDate = groupByDate(parsed);\n        setGroupStatsByDay(groupedByDate);\n\n        const rollingAvg = calcRollingAverage(parsed);\n        setGroupRollingAverage(rollingAvg);\n\n        const players = {};\n        parsed.forEach(e => {\n          if (!players[e.name]) players[e.name] = [];\n          players[e.name].push(e);\n        });\n        setPlayerStats(players);\n      });\n  }, []);\n\n  const parseDate = (str) => {\n    const [datePart] = str.split(' ');\n    const [day, month, year] = datePart.split('/');\n    return new Date(`${year}-${month}-${day}`);\n  };\n\n  const groupByDate = (data) => {\n    const days = {};\n    data.forEach(entry => {\n      const key = entry.date.toDateString();\n      if (!days[key]) days[key] = [];\n      days[key].push(entry);\n    });\n    const result = Object.entries(days).map(([dateStr, entries]) => {\n      const sleepAvg = avg(entries.map(e => e.sleep));\n      const soreAvg = avg(entries.map(e => e.sore));\n      const fatigueAvg = avg(entries.map(e => e.fatigue));\n      return { dateStr, sleepAvg, soreAvg, fatigueAvg };\n    }).slice(-8); // last 8 days\n    return result;\n  };\n\n  const avg = (arr) => arr.length ? (arr.reduce((a, b) => a + b, 0) / arr.length).toFixed(1) : 'אין דיווח';\n\n  const calcRollingAverage = (entries) => {\n    const cutoff = new Date();\n    cutoff.setDate(cutoff.getDate() - 7);\n    const lastDays = entries.filter(e => e.date >= cutoff);\n    return {\n      sleep: avg(lastDays.map(e => e.sleep)),\n      sore: avg(lastDays.map(e => e.sore)),\n      fatigue: avg(lastDays.map(e => e.fatigue))\n    };\n  };\n\n  const calcAverageInRange = (entries, start, end) => {\n    const filtered = entries.filter(e => e.date >= start && e.date <= end);\n    return {\n      sleep: avg(filtered.map(e => e.sleep)),\n      sore: avg(filtered.map(e => e.sore)),\n      fatigue: avg(filtered.map(e => e.fatigue))\n    };\n  };\n\n  const renderDayAveragesTable = () => (\n    <table>\n      <thead>\n        <tr>\n          <th>תאריך</th>\n          <th>שינה 💤</th>\n          <th>עייפות 😴</th>\n          <th>כאבי שרירים 💪</th>\n        </tr>\n      </thead>\n      <tbody>\n        {groupStatsByDay.map((d, idx) => (\n          <tr key={idx}>\n            <td>{d.dateStr}</td>\n            <td>{d.sleepAvg}</td>\n            <td>{d.fatigueAvg}</td>\n            <td>{d.soreAvg}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n\n  const renderPlayerSection = (name, entries) => {\n    const last8 = groupByDate(entries).slice(-8);\n    const avgRolling = calcRollingAverage(entries);\n    const getLastDaysAvg = (n) => {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - (n - 1));\n      return calcAverageInRange(entries, start, end);\n    };\n\n    return (\n      <div key={name}>\n        <h4 style={{ cursor: 'pointer', color: '#007bff' }} onClick={() => setExpandedPlayers(p => ({ ...p, [name]: !p[name] }))}>\n          {name}\n        </h4>\n        {expandedPlayers[name] && (\n          <div style={{ marginBottom: '20px' }}>\n            {renderDayAveragesTable(last8)}\n            <p>ממוצע מתגלגל:</p>\n            <p>שינה: {avgRolling.sleep} | עייפות: {avgRolling.fatigue} | כאבי שרירים: {avgRolling.sore}</p>\n            <p>ממוצע 3 ימים: {getLastDaysAvg(3).sleep}, {getLastDaysAvg(3).fatigue}, {getLastDaysAvg(3).sore}</p>\n            <p>ממוצע 5 ימים: {getLastDaysAvg(5).sleep}, {getLastDaysAvg(5).fatigue}, {getLastDaysAvg(5).sore}</p>\n            <p>ממוצע 8 ימים: {getLastDaysAvg(8).sleep}, {getLastDaysAvg(8).fatigue}, {getLastDaysAvg(8).sore}</p>\n            <div>\n              <label>טווח מותאם אישי:</label><br />\n              <input type=\"date\" onChange={(e) => setCustomStartDate(e.target.value)} />\n              <input type=\"date\" onChange={(e) => setCustomEndDate(e.target.value)} />\n              <button onClick={() => {\n                const start = new Date(customStartDate);\n                const end = new Date(customEndDate);\n                const avg = calcAverageInRange(entries, start, end);\n                alert(`שינה: ${avg.sleep}, עייפות: ${avg.fatigue}, כאבי שרירים: ${avg.sore}`);\n              }}>חשב ממוצע</button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ padding: '20px' }} dir=\"rtl\">\n      <h2>דוח Wellness</h2>\n      <h3>ממוצע קבוצתי - לפי ימים (8 ימים אחרונים)</h3>\n      {renderDayAveragesTable()}\n\n      <h3>ממוצע קבוצתי מתגלגל (8 ימים אחרונים)</h3>\n      <p>שינה: {groupRollingAverage?.sleep} | עייפות: {groupRollingAverage?.fatigue} | כאבי שרירים: {groupRollingAverage?.sore}</p>\n\n      <h3>ממוצע קבוצתי לפי טווח תאריכים</h3>\n      <input type=\"date\" onChange={(e) => setCustomStartDate(e.target.value)} />\n      <input type=\"date\" onChange={(e) => setCustomEndDate(e.target.value)} />\n      <button onClick={() => {\n        const start = new Date(customStartDate);\n        const end = new Date(customEndDate);\n        const avg = calcAverageInRange(data, start, end);\n        setCustomGroupAverage(avg);\n      }}>חשב ממוצע</button>\n      {customGroupAverage && (\n        <p>שינה: {customGroupAverage.sleep}, עייפות: {customGroupAverage.fatigue}, כאבי שרירים: {customGroupAverage.sore}</p>\n      )}\n\n      <h3>ממוצעים לפי שחקנית</h3>\n      {Object.entries(playerStats).map(([name, entries]) => renderPlayerSection(name, entries))}\n    </div>\n  );\n}\n\nexport default WellnessReport;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}