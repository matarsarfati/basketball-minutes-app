{"ast":null,"code":"var _jsxFileName = \"/Users/matarsarfati/Downloads/basketball-minutes-fixed/src/WellnessReport.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WellnessReport() {\n  _s();\n  const [data, setData] = useState([]);\n  const [groupDailyAverages, setGroupDailyAverages] = useState([]);\n  const [groupRollingAverages, setGroupRollingAverages] = useState({});\n  const [groupRangeAverage, setGroupRangeAverage] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [dateRange, setDateRange] = useState({\n    from: '',\n    to: ''\n  });\n  const sheetUrl = \"https://opensheet.elk.sh/1x1e53gsx3VzEJ5ON5QOvYeJTGI8auMtSxJYYpUUmreY/Wallnes\";\n  useEffect(() => {\n    fetch(sheetUrl).then(res => res.json()).then(json => {\n      setData(json);\n      const playerSet = new Set(json.map(row => row.Name));\n      setPlayers(Array.from(playerSet));\n      const grouped = {};\n      json.forEach(row => {\n        const dateStr = row.Timestamp.split(' ')[0];\n        if (!grouped[dateStr]) grouped[dateStr] = [];\n        grouped[dateStr].push(row);\n      });\n      const sortedDates = Object.keys(grouped).sort((a, b) => new Date(a.split('/').reverse().join('/')) - new Date(b.split('/').reverse().join('/')));\n      const last8Dates = sortedDates.slice(-8);\n      const daily = last8Dates.map(date => {\n        const rows = grouped[date];\n        const count = rows.length;\n        const sleep = rows.reduce((sum, r) => sum + Number(r[\"What is the quality of your sleep at night?\"] || 0), 0) / count;\n        const fatigue = rows.reduce((sum, r) => sum + Number(r[\"How Fatigued are you?\"] || 0), 0) / count;\n        const sore = rows.reduce((sum, r) => sum + Number(r[\"How sore are you?\"] || 0), 0) / count;\n        return {\n          date,\n          sleep: sleep.toFixed(1),\n          fatigue: fatigue.toFixed(1),\n          sore: sore.toFixed(1)\n        };\n      });\n      setGroupDailyAverages(daily);\n      const rolling = {\n        sleep: 0,\n        fatigue: 0,\n        sore: 0,\n        count: 0\n      };\n      daily.forEach(day => {\n        rolling.sleep += parseFloat(day.sleep);\n        rolling.fatigue += parseFloat(day.fatigue);\n        rolling.sore += parseFloat(day.sore);\n        rolling.count++;\n      });\n      if (rolling.count > 0) {\n        setGroupRollingAverages({\n          sleep: (rolling.sleep / rolling.count).toFixed(1),\n          fatigue: (rolling.fatigue / rolling.count).toFixed(1),\n          sore: (rolling.sore / rolling.count).toFixed(1)\n        });\n      }\n    });\n  }, []);\n  const handleRangeAverage = () => {\n    if (!dateRange.from || !dateRange.to) return;\n    const from = new Date(dateRange.from);\n    const to = new Date(dateRange.to);\n    const filtered = data.filter(row => {\n      const date = new Date(row.Timestamp.split(' ')[0].split('/').reverse().join('/'));\n      return date >= from && date <= to;\n    });\n    const count = filtered.length;\n    if (count === 0) {\n      setGroupRangeAverage('אין נתונים בטווח התאריכים');\n      return;\n    }\n    const sleep = filtered.reduce((sum, r) => sum + Number(r[\"What is the quality of your sleep at night?\"] || 0), 0) / count;\n    const fatigue = filtered.reduce((sum, r) => sum + Number(r[\"How Fatigued are you?\"] || 0), 0) / count;\n    const sore = filtered.reduce((sum, r) => sum + Number(r[\"How sore are you?\"] || 0), 0) / count;\n    setGroupRangeAverage({\n      sleep: sleep.toFixed(1),\n      fatigue: fatigue.toFixed(1),\n      sore: sore.toFixed(1)\n    });\n  };\n  const getRecentAverage = (filteredDates, daysBack) => {\n    const today = new Date();\n    const recentDates = [];\n    let counter = 0;\n    for (let i = filteredDates.length - 1; i >= 0 && counter < daysBack; i--) {\n      recentDates.push(filteredDates[i]);\n      counter++;\n    }\n    return recentDates;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    dir: \"rtl\",\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u05D3\\u05D5\\u05D7 Wellness\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05E7\\u05D1\\u05D5\\u05E6\\u05EA\\u05D9 - \\u05DC\\u05E4\\u05D9 \\u05D9\\u05D5\\u05DD (8 \\u05D9\\u05DE\\u05D9\\u05DD \\u05D0\\u05D7\\u05E8\\u05D5\\u05E0\\u05D9\\u05DD)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"8\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u05EA\\u05D0\\u05E8\\u05D9\\u05DA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u05E9\\u05D9\\u05E0\\u05D4 \\uD83D\\uDCA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA \\uD83D\\uDE34\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD \\uD83D\\uDCAA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: groupDailyAverages.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.sleep\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.fatigue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.sore\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05E7\\u05D1\\u05D5\\u05E6\\u05EA\\u05D9 \\u05DE\\u05EA\\u05D2\\u05DC\\u05D2\\u05DC - 8 \\u05D9\\u05DE\\u05D9\\u05DD \\u05D0\\u05D7\\u05E8\\u05D5\\u05E0\\u05D9\\u05DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), groupRollingAverages.sleep ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u05E9\\u05D9\\u05E0\\u05D4: \", groupRollingAverages.sleep, \" | \\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA: \", groupRollingAverages.fatigue, \" | \\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD: \", groupRollingAverages.sore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u05D0\\u05D9\\u05DF \\u05E0\\u05EA\\u05D5\\u05E0\\u05D9\\u05DD \\u05DC\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05DE\\u05EA\\u05D2\\u05DC\\u05D2\\u05DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u05DE\\u05DE\\u05D5\\u05E6\\u05E2 \\u05E7\\u05D1\\u05D5\\u05E6\\u05EA\\u05D9 \\u05DC\\u05E4\\u05D9 \\u05D8\\u05D5\\u05D5\\u05D7 \\u05EA\\u05D0\\u05E8\\u05D9\\u05DB\\u05D9\\u05DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u05DE\\u05EA\\u05D0\\u05E8\\u05D9\\u05DA: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: dateRange.from,\n          onChange: e => setDateRange({\n            ...dateRange,\n            from: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u05E2\\u05D3 \\u05EA\\u05D0\\u05E8\\u05D9\\u05DA: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: dateRange.to,\n          onChange: e => setDateRange({\n            ...dateRange,\n            to: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRangeAverage,\n        children: \"\\u05D7\\u05E9\\u05D1 \\u05DE\\u05DE\\u05D5\\u05E6\\u05E2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), groupRangeAverage && (typeof groupRangeAverage === 'string' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: groupRangeAverage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 49\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u05E9\\u05D9\\u05E0\\u05D4: \", groupRangeAverage.sleep, \" | \\u05E2\\u05D9\\u05D9\\u05E4\\u05D5\\u05EA: \", groupRangeAverage.fatigue, \" | \\u05DB\\u05D0\\u05D1\\u05D9 \\u05E9\\u05E8\\u05D9\\u05E8\\u05D9\\u05DD: \", groupRangeAverage.sore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(WellnessReport, \"Xuen1vDSdoS4exM8GcALil4/gZc=\");\n_c = WellnessReport;\nexport default WellnessReport;\nvar _c;\n$RefreshReg$(_c, \"WellnessReport\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WellnessReport","_s","data","setData","groupDailyAverages","setGroupDailyAverages","groupRollingAverages","setGroupRollingAverages","groupRangeAverage","setGroupRangeAverage","players","setPlayers","dateRange","setDateRange","from","to","sheetUrl","fetch","then","res","json","playerSet","Set","map","row","Name","Array","grouped","forEach","dateStr","Timestamp","split","push","sortedDates","Object","keys","sort","a","b","Date","reverse","join","last8Dates","slice","daily","date","rows","count","length","sleep","reduce","sum","r","Number","fatigue","sore","toFixed","rolling","day","parseFloat","handleRangeAverage","filtered","filter","getRecentAverage","filteredDates","daysBack","today","recentDates","counter","i","dir","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","border","cellPadding","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/matarsarfati/Downloads/basketball-minutes-fixed/src/WellnessReport.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction WellnessReport() {\n  const [data, setData] = useState([]);\n  const [groupDailyAverages, setGroupDailyAverages] = useState([]);\n  const [groupRollingAverages, setGroupRollingAverages] = useState({});\n  const [groupRangeAverage, setGroupRangeAverage] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [dateRange, setDateRange] = useState({ from: '', to: '' });\n\n  const sheetUrl = \"https://opensheet.elk.sh/1x1e53gsx3VzEJ5ON5QOvYeJTGI8auMtSxJYYpUUmreY/Wallnes\";\n\n  useEffect(() => {\n    fetch(sheetUrl)\n      .then(res => res.json())\n      .then(json => {\n        setData(json);\n        const playerSet = new Set(json.map(row => row.Name));\n        setPlayers(Array.from(playerSet));\n\n        const grouped = {};\n        json.forEach(row => {\n          const dateStr = row.Timestamp.split(' ')[0];\n          if (!grouped[dateStr]) grouped[dateStr] = [];\n          grouped[dateStr].push(row);\n        });\n\n        const sortedDates = Object.keys(grouped).sort((a, b) => new Date(a.split('/').reverse().join('/')) - new Date(b.split('/').reverse().join('/')));\n        const last8Dates = sortedDates.slice(-8);\n\n        const daily = last8Dates.map(date => {\n          const rows = grouped[date];\n          const count = rows.length;\n          const sleep = rows.reduce((sum, r) => sum + Number(r[\"What is the quality of your sleep at night?\"] || 0), 0) / count;\n          const fatigue = rows.reduce((sum, r) => sum + Number(r[\"How Fatigued are you?\"] || 0), 0) / count;\n          const sore = rows.reduce((sum, r) => sum + Number(r[\"How sore are you?\"] || 0), 0) / count;\n          return { date, sleep: sleep.toFixed(1), fatigue: fatigue.toFixed(1), sore: sore.toFixed(1) };\n        });\n\n        setGroupDailyAverages(daily);\n\n        const rolling = { sleep: 0, fatigue: 0, sore: 0, count: 0 };\n        daily.forEach(day => {\n          rolling.sleep += parseFloat(day.sleep);\n          rolling.fatigue += parseFloat(day.fatigue);\n          rolling.sore += parseFloat(day.sore);\n          rolling.count++;\n        });\n\n        if (rolling.count > 0) {\n          setGroupRollingAverages({\n            sleep: (rolling.sleep / rolling.count).toFixed(1),\n            fatigue: (rolling.fatigue / rolling.count).toFixed(1),\n            sore: (rolling.sore / rolling.count).toFixed(1)\n          });\n        }\n      });\n  }, []);\n\n  const handleRangeAverage = () => {\n    if (!dateRange.from || !dateRange.to) return;\n\n    const from = new Date(dateRange.from);\n    const to = new Date(dateRange.to);\n\n    const filtered = data.filter(row => {\n      const date = new Date(row.Timestamp.split(' ')[0].split('/').reverse().join('/'));\n      return date >= from && date <= to;\n    });\n\n    const count = filtered.length;\n    if (count === 0) {\n      setGroupRangeAverage('אין נתונים בטווח התאריכים');\n      return;\n    }\n\n    const sleep = filtered.reduce((sum, r) => sum + Number(r[\"What is the quality of your sleep at night?\"] || 0), 0) / count;\n    const fatigue = filtered.reduce((sum, r) => sum + Number(r[\"How Fatigued are you?\"] || 0), 0) / count;\n    const sore = filtered.reduce((sum, r) => sum + Number(r[\"How sore are you?\"] || 0), 0) / count;\n\n    setGroupRangeAverage({\n      sleep: sleep.toFixed(1),\n      fatigue: fatigue.toFixed(1),\n      sore: sore.toFixed(1)\n    });\n  };\n\n  const getRecentAverage = (filteredDates, daysBack) => {\n    const today = new Date();\n    const recentDates = [];\n    let counter = 0;\n    for (let i = filteredDates.length - 1; i >= 0 && counter < daysBack; i--) {\n      recentDates.push(filteredDates[i]);\n      counter++;\n    }\n    return recentDates;\n  };\n\n  return (\n    <div dir=\"rtl\" style={{ padding: '20px' }}>\n      <h1>דוח Wellness</h1>\n\n      <h2>ממוצע קבוצתי - לפי יום (8 ימים אחרונים)</h2>\n      <table border=\"1\" cellPadding=\"8\">\n        <thead>\n          <tr>\n            <th>תאריך</th>\n            <th>שינה 💤</th>\n            <th>עייפות 😴</th>\n            <th>כאבי שרירים 💪</th>\n          </tr>\n        </thead>\n        <tbody>\n          {groupDailyAverages.map((row, i) => (\n            <tr key={i}>\n              <td>{row.date}</td>\n              <td>{row.sleep}</td>\n              <td>{row.fatigue}</td>\n              <td>{row.sore}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <h2>ממוצע קבוצתי מתגלגל - 8 ימים אחרונים</h2>\n      {groupRollingAverages.sleep ? (\n        <p>\n          שינה: {groupRollingAverages.sleep} | עייפות: {groupRollingAverages.fatigue} | כאבי שרירים: {groupRollingAverages.sore}\n        </p>\n      ) : (\n        <p>אין נתונים לממוצע מתגלגל</p>\n      )}\n\n      <h2>ממוצע קבוצתי לפי טווח תאריכים</h2>\n      <div>\n        <label>מתאריך: <input type=\"date\" value={dateRange.from} onChange={e => setDateRange({ ...dateRange, from: e.target.value })} /></label>\n        <label>עד תאריך: <input type=\"date\" value={dateRange.to} onChange={e => setDateRange({ ...dateRange, to: e.target.value })} /></label>\n        <button onClick={handleRangeAverage}>חשב ממוצע</button>\n      </div>\n      {groupRangeAverage && (\n        typeof groupRangeAverage === 'string' ? <p>{groupRangeAverage}</p> :\n          <p>\n            שינה: {groupRangeAverage.sleep} | עייפות: {groupRangeAverage.fatigue} | כאבי שרירים: {groupRangeAverage.sore}\n          </p>\n      )}\n    </div>\n  );\n}\n\nexport default WellnessReport;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}